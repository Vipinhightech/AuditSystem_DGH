//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AuditSystem.WebUI.Authentication {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthResponse", Namespace="http://schemas.datacontract.org/2004/07/ExternalAuthenticationService")]
    [System.SerializableAttribute()]
    public partial class AuthResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ApplicationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EndUserRoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] UserRoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UseridField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Application {
            get {
                return this.ApplicationField;
            }
            set {
                if ((object.ReferenceEquals(this.ApplicationField, value) != true)) {
                    this.ApplicationField = value;
                    this.RaisePropertyChanged("Application");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EndUserRole {
            get {
                return this.EndUserRoleField;
            }
            set {
                if ((object.ReferenceEquals(this.EndUserRoleField, value) != true)) {
                    this.EndUserRoleField = value;
                    this.RaisePropertyChanged("EndUserRole");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] UserRole {
            get {
                return this.UserRoleField;
            }
            set {
                if ((object.ReferenceEquals(this.UserRoleField, value) != true)) {
                    this.UserRoleField = value;
                    this.RaisePropertyChanged("UserRole");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Userid {
            get {
                return this.UseridField;
            }
            set {
                if ((object.ReferenceEquals(this.UseridField, value) != true)) {
                    this.UseridField = value;
                    this.RaisePropertyChanged("Userid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RegisterResponse", Namespace="http://schemas.datacontract.org/2004/07/ExternalAuthenticationService")]
    [System.SerializableAttribute()]
    public partial class RegisterResponse : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperatorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UseridField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operator {
            get {
                return this.OperatorField;
            }
            set {
                if ((object.ReferenceEquals(this.OperatorField, value) != true)) {
                    this.OperatorField = value;
                    this.RaisePropertyChanged("Operator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Userid {
            get {
                return this.UseridField;
            }
            set {
                if ((object.ReferenceEquals(this.UseridField, value) != true)) {
                    this.UseridField = value;
                    this.RaisePropertyChanged("Userid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Authentication.IExternalAuthentication")]
    public interface IExternalAuthentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ValidateUser", ReplyAction="http://tempuri.org/IExternalAuthentication/ValidateUserResponse")]
        AuditSystem.WebUI.Authentication.AuthResponse ValidateUser(string Userid, string Decodepass, int Operator, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ValidateUser", ReplyAction="http://tempuri.org/IExternalAuthentication/ValidateUserResponse")]
        System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.AuthResponse> ValidateUserAsync(string Userid, string Decodepass, int Operator, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ValidateUserNOC", ReplyAction="http://tempuri.org/IExternalAuthentication/ValidateUserNOCResponse")]
        AuditSystem.WebUI.Authentication.AuthResponse ValidateUserNOC(string Userid, string Decodepass, int Operator, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ValidateUserNOC", ReplyAction="http://tempuri.org/IExternalAuthentication/ValidateUserNOCResponse")]
        System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.AuthResponse> ValidateUserNOCAsync(string Userid, string Decodepass, int Operator, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ValidateUserOTP", ReplyAction="http://tempuri.org/IExternalAuthentication/ValidateUserOTPResponse")]
        string ValidateUserOTP(string Userid, string OTP, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ValidateUserOTP", ReplyAction="http://tempuri.org/IExternalAuthentication/ValidateUserOTPResponse")]
        System.Threading.Tasks.Task<string> ValidateUserOTPAsync(string Userid, string OTP, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ReinitialiseUser", ReplyAction="http://tempuri.org/IExternalAuthentication/ReinitialiseUserResponse")]
        AuditSystem.WebUI.Authentication.AuthResponse ReinitialiseUser(string Userid, string Operator, string Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ReinitialiseUser", ReplyAction="http://tempuri.org/IExternalAuthentication/ReinitialiseUserResponse")]
        System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.AuthResponse> ReinitialiseUserAsync(string Userid, string Operator, string Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/RegisterUser", ReplyAction="http://tempuri.org/IExternalAuthentication/RegisterUserResponse")]
        AuditSystem.WebUI.Authentication.RegisterResponse RegisterUser(string Userid, string Operator, string Name, string Password, string Email, string Phone, string Address, string Designation, int Application, string Generated, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/RegisterUser", ReplyAction="http://tempuri.org/IExternalAuthentication/RegisterUserResponse")]
        System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.RegisterResponse> RegisterUserAsync(string Userid, string Operator, string Name, string Password, string Email, string Phone, string Address, string Designation, int Application, string Generated, string Status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ForgotPassword", ReplyAction="http://tempuri.org/IExternalAuthentication/ForgotPasswordResponse")]
        string ForgotPassword(string Userid, string Email, string Phone, string Operator, string Password, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ForgotPassword", ReplyAction="http://tempuri.org/IExternalAuthentication/ForgotPasswordResponse")]
        System.Threading.Tasks.Task<string> ForgotPasswordAsync(string Userid, string Email, string Phone, string Operator, string Password, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ChangePassword", ReplyAction="http://tempuri.org/IExternalAuthentication/ChangePasswordResponse")]
        string ChangePassword(string Userid, string OldPassword, string NewPassword, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ChangePassword", ReplyAction="http://tempuri.org/IExternalAuthentication/ChangePasswordResponse")]
        System.Threading.Tasks.Task<string> ChangePasswordAsync(string Userid, string OldPassword, string NewPassword, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ResetPassword", ReplyAction="http://tempuri.org/IExternalAuthentication/ResetPasswordResponse")]
        string ResetPassword(string Userid, string NewPassword, int Application, string UserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ResetPassword", ReplyAction="http://tempuri.org/IExternalAuthentication/ResetPasswordResponse")]
        System.Threading.Tasks.Task<string> ResetPasswordAsync(string Userid, string NewPassword, int Application, string UserType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/EditProfile", ReplyAction="http://tempuri.org/IExternalAuthentication/EditProfileResponse")]
        string EditProfile(string Userid, string Password, string Name, string Designation, string Email, string Phone, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/EditProfile", ReplyAction="http://tempuri.org/IExternalAuthentication/EditProfileResponse")]
        System.Threading.Tasks.Task<string> EditProfileAsync(string Userid, string Password, string Name, string Designation, string Email, string Phone, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/GovSendMail", ReplyAction="http://tempuri.org/IExternalAuthentication/GovSendMailResponse")]
        string GovSendMail(string txtFrom, string txtTo, string txtCC, string txtBcc, string txtSubject, string txtBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/GovSendMail", ReplyAction="http://tempuri.org/IExternalAuthentication/GovSendMailResponse")]
        System.Threading.Tasks.Task<string> GovSendMailAsync(string txtFrom, string txtTo, string txtCC, string txtBcc, string txtSubject, string txtBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ValidateSSO", ReplyAction="http://tempuri.org/IExternalAuthentication/ValidateSSOResponse")]
        AuditSystem.WebUI.Authentication.AuthResponse ValidateSSO(string sessionid, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/ValidateSSO", ReplyAction="http://tempuri.org/IExternalAuthentication/ValidateSSOResponse")]
        System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.AuthResponse> ValidateSSOAsync(string sessionid, int Application);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/GetSSOUser", ReplyAction="http://tempuri.org/IExternalAuthentication/GetSSOUserResponse")]
        string GetSSOUser(string sessionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/GetSSOUser", ReplyAction="http://tempuri.org/IExternalAuthentication/GetSSOUserResponse")]
        System.Threading.Tasks.Task<string> GetSSOUserAsync(string sessionid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/GovSendMailAttachment", ReplyAction="http://tempuri.org/IExternalAuthentication/GovSendMailAttachmentResponse")]
        string GovSendMailAttachment(string txtFrom, string txtTo, string txtCC, string txtBcc, string txtSubject, string txtBody, string IsAttachment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/GovSendMailAttachment", ReplyAction="http://tempuri.org/IExternalAuthentication/GovSendMailAttachmentResponse")]
        System.Threading.Tasks.Task<string> GovSendMailAttachmentAsync(string txtFrom, string txtTo, string txtCC, string txtBcc, string txtSubject, string txtBody, string IsAttachment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendSingleSMS", ReplyAction="http://tempuri.org/IExternalAuthentication/SendSingleSMSResponse")]
        string SendSingleSMS(string mobileNo, string message, string templateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendSingleSMS", ReplyAction="http://tempuri.org/IExternalAuthentication/SendSingleSMSResponse")]
        System.Threading.Tasks.Task<string> SendSingleSMSAsync(string mobileNo, string message, string templateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendBulkSMS", ReplyAction="http://tempuri.org/IExternalAuthentication/SendBulkSMSResponse")]
        string SendBulkSMS(string mobileNos, string message, string templateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendBulkSMS", ReplyAction="http://tempuri.org/IExternalAuthentication/SendBulkSMSResponse")]
        System.Threading.Tasks.Task<string> SendBulkSMSAsync(string mobileNos, string message, string templateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendUnicodeSMS", ReplyAction="http://tempuri.org/IExternalAuthentication/SendUnicodeSMSResponse")]
        string SendUnicodeSMS(string mobileNos, string Unicodemessage, string templateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendUnicodeSMS", ReplyAction="http://tempuri.org/IExternalAuthentication/SendUnicodeSMSResponse")]
        System.Threading.Tasks.Task<string> SendUnicodeSMSAsync(string mobileNos, string Unicodemessage, string templateid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendOTPMsg", ReplyAction="http://tempuri.org/IExternalAuthentication/SendOTPMsgResponse")]
        string SendOTPMsg(string Userid, int Application, bool resetAttempt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendOTPMsg", ReplyAction="http://tempuri.org/IExternalAuthentication/SendOTPMsgResponse")]
        System.Threading.Tasks.Task<string> SendOTPMsgAsync(string Userid, int Application, bool resetAttempt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendUnicodeOTPSMS", ReplyAction="http://tempuri.org/IExternalAuthentication/SendUnicodeOTPSMSResponse")]
        string SendUnicodeOTPSMS(string mobileNos, string Otp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IExternalAuthentication/SendUnicodeOTPSMS", ReplyAction="http://tempuri.org/IExternalAuthentication/SendUnicodeOTPSMSResponse")]
        System.Threading.Tasks.Task<string> SendUnicodeOTPSMSAsync(string mobileNos, string Otp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IExternalAuthenticationChannel : AuditSystem.WebUI.Authentication.IExternalAuthentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExternalAuthenticationClient : System.ServiceModel.ClientBase<AuditSystem.WebUI.Authentication.IExternalAuthentication>, AuditSystem.WebUI.Authentication.IExternalAuthentication {
        
        public ExternalAuthenticationClient() {
        }
        
        public ExternalAuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExternalAuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExternalAuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExternalAuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public AuditSystem.WebUI.Authentication.AuthResponse ValidateUser(string Userid, string Decodepass, int Operator, int Application) {
            return base.Channel.ValidateUser(Userid, Decodepass, Operator, Application);
        }
        
        public System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.AuthResponse> ValidateUserAsync(string Userid, string Decodepass, int Operator, int Application) {
            return base.Channel.ValidateUserAsync(Userid, Decodepass, Operator, Application);
        }
        
        public AuditSystem.WebUI.Authentication.AuthResponse ValidateUserNOC(string Userid, string Decodepass, int Operator, int Application) {
            return base.Channel.ValidateUserNOC(Userid, Decodepass, Operator, Application);
        }
        
        public System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.AuthResponse> ValidateUserNOCAsync(string Userid, string Decodepass, int Operator, int Application) {
            return base.Channel.ValidateUserNOCAsync(Userid, Decodepass, Operator, Application);
        }
        
        public string ValidateUserOTP(string Userid, string OTP, int Application) {
            return base.Channel.ValidateUserOTP(Userid, OTP, Application);
        }
        
        public System.Threading.Tasks.Task<string> ValidateUserOTPAsync(string Userid, string OTP, int Application) {
            return base.Channel.ValidateUserOTPAsync(Userid, OTP, Application);
        }
        
        public AuditSystem.WebUI.Authentication.AuthResponse ReinitialiseUser(string Userid, string Operator, string Application) {
            return base.Channel.ReinitialiseUser(Userid, Operator, Application);
        }
        
        public System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.AuthResponse> ReinitialiseUserAsync(string Userid, string Operator, string Application) {
            return base.Channel.ReinitialiseUserAsync(Userid, Operator, Application);
        }
        
        public AuditSystem.WebUI.Authentication.RegisterResponse RegisterUser(string Userid, string Operator, string Name, string Password, string Email, string Phone, string Address, string Designation, int Application, string Generated, string Status) {
            return base.Channel.RegisterUser(Userid, Operator, Name, Password, Email, Phone, Address, Designation, Application, Generated, Status);
        }
        
        public System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.RegisterResponse> RegisterUserAsync(string Userid, string Operator, string Name, string Password, string Email, string Phone, string Address, string Designation, int Application, string Generated, string Status) {
            return base.Channel.RegisterUserAsync(Userid, Operator, Name, Password, Email, Phone, Address, Designation, Application, Generated, Status);
        }
        
        public string ForgotPassword(string Userid, string Email, string Phone, string Operator, string Password, int Application) {
            return base.Channel.ForgotPassword(Userid, Email, Phone, Operator, Password, Application);
        }
        
        public System.Threading.Tasks.Task<string> ForgotPasswordAsync(string Userid, string Email, string Phone, string Operator, string Password, int Application) {
            return base.Channel.ForgotPasswordAsync(Userid, Email, Phone, Operator, Password, Application);
        }
        
        public string ChangePassword(string Userid, string OldPassword, string NewPassword, int Application) {
            return base.Channel.ChangePassword(Userid, OldPassword, NewPassword, Application);
        }
        
        public System.Threading.Tasks.Task<string> ChangePasswordAsync(string Userid, string OldPassword, string NewPassword, int Application) {
            return base.Channel.ChangePasswordAsync(Userid, OldPassword, NewPassword, Application);
        }
        
        public string ResetPassword(string Userid, string NewPassword, int Application, string UserType) {
            return base.Channel.ResetPassword(Userid, NewPassword, Application, UserType);
        }
        
        public System.Threading.Tasks.Task<string> ResetPasswordAsync(string Userid, string NewPassword, int Application, string UserType) {
            return base.Channel.ResetPasswordAsync(Userid, NewPassword, Application, UserType);
        }
        
        public string EditProfile(string Userid, string Password, string Name, string Designation, string Email, string Phone, int Application) {
            return base.Channel.EditProfile(Userid, Password, Name, Designation, Email, Phone, Application);
        }
        
        public System.Threading.Tasks.Task<string> EditProfileAsync(string Userid, string Password, string Name, string Designation, string Email, string Phone, int Application) {
            return base.Channel.EditProfileAsync(Userid, Password, Name, Designation, Email, Phone, Application);
        }
        
        public string GovSendMail(string txtFrom, string txtTo, string txtCC, string txtBcc, string txtSubject, string txtBody) {
            return base.Channel.GovSendMail(txtFrom, txtTo, txtCC, txtBcc, txtSubject, txtBody);
        }
        
        public System.Threading.Tasks.Task<string> GovSendMailAsync(string txtFrom, string txtTo, string txtCC, string txtBcc, string txtSubject, string txtBody) {
            return base.Channel.GovSendMailAsync(txtFrom, txtTo, txtCC, txtBcc, txtSubject, txtBody);
        }
        
        public AuditSystem.WebUI.Authentication.AuthResponse ValidateSSO(string sessionid, int Application) {
            return base.Channel.ValidateSSO(sessionid, Application);
        }
        
        public System.Threading.Tasks.Task<AuditSystem.WebUI.Authentication.AuthResponse> ValidateSSOAsync(string sessionid, int Application) {
            return base.Channel.ValidateSSOAsync(sessionid, Application);
        }
        
        public string GetSSOUser(string sessionid) {
            return base.Channel.GetSSOUser(sessionid);
        }
        
        public System.Threading.Tasks.Task<string> GetSSOUserAsync(string sessionid) {
            return base.Channel.GetSSOUserAsync(sessionid);
        }
        
        public string GovSendMailAttachment(string txtFrom, string txtTo, string txtCC, string txtBcc, string txtSubject, string txtBody, string IsAttachment) {
            return base.Channel.GovSendMailAttachment(txtFrom, txtTo, txtCC, txtBcc, txtSubject, txtBody, IsAttachment);
        }
        
        public System.Threading.Tasks.Task<string> GovSendMailAttachmentAsync(string txtFrom, string txtTo, string txtCC, string txtBcc, string txtSubject, string txtBody, string IsAttachment) {
            return base.Channel.GovSendMailAttachmentAsync(txtFrom, txtTo, txtCC, txtBcc, txtSubject, txtBody, IsAttachment);
        }
        
        public string SendSingleSMS(string mobileNo, string message, string templateid) {
            return base.Channel.SendSingleSMS(mobileNo, message, templateid);
        }
        
        public System.Threading.Tasks.Task<string> SendSingleSMSAsync(string mobileNo, string message, string templateid) {
            return base.Channel.SendSingleSMSAsync(mobileNo, message, templateid);
        }
        
        public string SendBulkSMS(string mobileNos, string message, string templateid) {
            return base.Channel.SendBulkSMS(mobileNos, message, templateid);
        }
        
        public System.Threading.Tasks.Task<string> SendBulkSMSAsync(string mobileNos, string message, string templateid) {
            return base.Channel.SendBulkSMSAsync(mobileNos, message, templateid);
        }
        
        public string SendUnicodeSMS(string mobileNos, string Unicodemessage, string templateid) {
            return base.Channel.SendUnicodeSMS(mobileNos, Unicodemessage, templateid);
        }
        
        public System.Threading.Tasks.Task<string> SendUnicodeSMSAsync(string mobileNos, string Unicodemessage, string templateid) {
            return base.Channel.SendUnicodeSMSAsync(mobileNos, Unicodemessage, templateid);
        }
        
        public string SendOTPMsg(string Userid, int Application, bool resetAttempt) {
            return base.Channel.SendOTPMsg(Userid, Application, resetAttempt);
        }
        
        public System.Threading.Tasks.Task<string> SendOTPMsgAsync(string Userid, int Application, bool resetAttempt) {
            return base.Channel.SendOTPMsgAsync(Userid, Application, resetAttempt);
        }
        
        public string SendUnicodeOTPSMS(string mobileNos, string Otp) {
            return base.Channel.SendUnicodeOTPSMS(mobileNos, Otp);
        }
        
        public System.Threading.Tasks.Task<string> SendUnicodeOTPSMSAsync(string mobileNos, string Otp) {
            return base.Channel.SendUnicodeOTPSMSAsync(mobileNos, Otp);
        }
    }
}
