@model AuditSystem.Core.Models.AuditSystem_Blocks

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@{
    var currentYear = DateTime.Now.Year;
    var startYear = 1995;
    var endYear = currentYear + 1; // To include the current financial year
    var financialYears = new List<SelectListItem>();

    for (var year = currentYear; year >= startYear; year--)
    {
        financialYears.Add(new SelectListItem
        {
            Text = $"{year}-{year + 1}",
            Value = $"{year}-{year + 1}"
        });
    }
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Block</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Block_Id)

        <table class="table">
            <tbody>
                <tr style="border-style:hidden;">
                    <td style="width:15%"> @Html.LabelFor(model => model.Block_Name, htmlAttributes: new { @class = "control-label col-md-2" })</td>
                    <td style="width:35%">
                        @Html.DisplayFor(model => model.Block_Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.HiddenFor(model => model.Block_Name)
                    </td>



                    <td style="width:15%">  @Html.LabelFor(model => model.Psc_Start_Date, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.DisplayFor(model => model.Psc_Start_Date, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.HiddenFor(model => model.Psc_Start_Date)
                    </td>

                </tr>


                <tr style="border-style:hidden;">
                    <td style="width:15%"> @Html.LabelFor(model => model.Block_Current_Status, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.DropDownListFor(model => model.Block_Current_Status, new List<SelectListItem> {
                           new SelectListItem {Text = "Exploration",Value =  "Exploration" },
                           new SelectListItem {Text = "Development",Value =  "Development" },
                           new SelectListItem {Text = "Production",Value =  "Production" }
                       })
                    </td>



                    <td style="width:15%"> @Html.LabelFor(model => model.Block_Category, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.DropDownListFor(model => model.Block_Category, new SelectList(Enumerable.Range(1, 4)))
                    </td>

                </tr>


                <tr style="border-style:hidden;">
                    <td style="width:15%"> @Html.LabelFor(model => model.Revenue_Till_Date, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.Revenue_Till_Date, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Revenue_Till_Date, "", new { @class = "text-danger" })
                    </td>



                    <td style="width:15%"> @Html.LabelFor(model => model.Expenditure_Till_Date, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.Expenditure_Till_Date, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Expenditure_Till_Date, "", new { @class = "text-danger" })
                    </td>

                </tr>

                <tr style="border-style:hidden;">
                    <td style="width:15%">  @Html.LabelFor(model => model.Updated_Status_Year, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.DropDownListFor(model => model.Updated_Status_Year, financialYears)
                    </td>


                </tr>

            </tbody>
        </table>


        <hr />
        <div class="form-group">
            <h5>Yearwise Revenue and Expenditure </h5> <br />
            <div class="col-md-10">
                <table id="RevExpTable" class="table">
                    <thead>
                        <tr>
                            <th>Year</th>
                            <th>Revenue</th>
                            <th>Expenditure</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Revenue_Expenditures.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Html.HiddenFor(model => model.Revenue_Expenditures[i].Id)
                                   
                                    @Html.DropDownListFor(model => model.Revenue_Expenditures[i].Year, financialYears)
                                </td>

                                <td>
                                    @Html.EditorFor(model => model.Revenue_Expenditures[i].Revenue, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Revenue_Expenditures[i].Revenue, "", new { @class = "text-danger" })
                                </td>

                                <td>
                                    @Html.EditorFor(model => model.Revenue_Expenditures[i].Expenditure, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Revenue_Expenditures[i].Expenditure, "", new { @class = "text-danger" })
                                </td>

                                <td>
                                    <button type="button" class="btn btn-danger" onclick="removeRow(this, @Model.Revenue_Expenditures[i].Id)">Remove</button>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
                <button style="float:right" type="button" class="btn btn-primary" onclick="addRow()">Add Row</button>

            </div>
        </div>

        <input type="hidden" id="removedItems" name="RemovedItems" value="" />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" onclick="return confirm('Are you sure you want to save?');" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index") |
    @Html.ActionLink("Block Details", "Details", new { Id = Model.Block_Id })
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
        function addRow_old() {
            var table = document.getElementById('RevExpTable').getElementsByTagName('tbody')[0];
            var newRow = table.insertRow();
            var rowCount = table.rows.length - 1;
            var yearOptions = @Html.Raw(Json.Encode(financialYears.Select(f => new { f.Value, f.Text })));

            newRow.innerHTML = `
                 <td><input type="hidden" name="Revenue_Expenditures[${rowCount}].Id" value="0"/>
                     <select name="Revenue_Expenditures[${rowCount}].Year">
                         ${yearOptions.map(option => `<option value="${option.Value}">${option.Text}</option>`).join('')}
                     </select>
                 </td>
                 <td>
                     <input type="text" name="Revenue_Expenditures[${rowCount}].Revenue" class="form-control" />
                 </td>
                 <td>
                     <input type="text" name="Revenue_Expenditures[${rowCount}].Expenditure" class="form-control" />
                 </td>
                 <td>
                     <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                 </td>
             `;
    }

     function addRow() {
            var table = document.getElementById('RevExpTable').getElementsByTagName('tbody')[0];
            var newRow = table.insertRow();
            var rowCount = table.rows.length - 1;
            var yearOptions = @Html.Raw(Json.Encode(financialYears.Select(f => new { f.Value, f.Text })));

            var selectedYears = Array.from(document.querySelectorAll('#RevExpTable select[name^="Revenue_Expenditures"]'))
                .map(select => select.value);

            // Filter available options
            var filteredOptions = yearOptions
                .filter(option => !selectedYears.includes(option.Value))
                .map(option => `<option value="${option.Value}">${option.Text}</option>`)
                .join('');

            if (filteredOptions === '') {
                alert('All years have already been selected.');
                return;
            }

            newRow.innerHTML = `
                 <td><input type="hidden" name="Revenue_Expenditures[${rowCount}].Id" value="0"/>
                     <select name="Revenue_Expenditures[${rowCount}].Year onchange="validateYear(this)">
                         ${filteredOptions}
                     </select>
                 </td>
                 <td>
                     <input type="text" name="Revenue_Expenditures[${rowCount}].Revenue" class="form-control" />
                 </td>
                 <td>
                     <input type="text" name="Revenue_Expenditures[${rowCount}].Expenditure" class="form-control" />
                 </td>
                 <td>
                     <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                 </td>
             `;
        }

        function removeRow(button, id) {
            var row = button.closest('tr');
            row.parentNode.removeChild(row);
            var removedItems = document.getElementById('removedItems').value;
            if (id != 0) {
                removedItems += id + ",";
                document.getElementById('removedItems').value = removedItems;
            }
    }

    function validateYear(selectElement) {
        var selectedYear = selectElement.value;
        var allSelects = document.querySelectorAll('#RevExpTable select[name^="Revenue_Expenditures"]');

        for (var i = 0; i < allSelects.length; i++) {
            if (allSelects[i] !== selectElement && allSelects[i].value === selectedYear) {
                alert('This year is already selected in another row.');
                selectElement.value = '';
                break;
            }
        }
    }



</script>
}
