@model AuditSystem.Core.Models.Audit_Exception_Details

@{
    ViewBag.Title = "Create";
}

@*<h2>Create</h2>*@

@{
    var currentYear = DateTime.Now.Year;
    var startYear = 1995;
    var endYear = currentYear + 1; // To include the current financial year
    var financialYears = new List<SelectListItem>();

    for (var year = currentYear; year >= startYear; year--)
    {
        financialYears.Add(new SelectListItem
        {
            Text = $"{year}-{year + 1}",
            Value = $"{year}-{year + 1}"
        });
    }
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Add New Exception</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*<div class="form-group">
                @Html.LabelFor(model => model.ExceptionId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ExceptionId, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ExceptionId, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <table class="table">
            <tbody>
                <tr style="border-style: hidden;">
                    <td style="width:15%"> @Html.LabelFor(model => model.Block.Block_Name, htmlAttributes: new { @class = "control-label col-md-2" })</td>
                    <td style="width:35%">
                        @Html.DisplayFor(model => model.Block.Block_Name)
                        @Html.HiddenFor(model => model.Block_Id)
                    </td>

                    <td style="width:15%">  @Html.LabelFor(model => model.Year, htmlAttributes: new { @class = "control-label col-md-2" })</td>
                    <td style="width:35%">
                        From:
                        @Html.DropDownListFor(model => model.Year, financialYears)
                        &nbsp; To:
                        @Html.DropDownListFor(model => model.ToYear, financialYears)
                    </td>

                </tr>

                <tr style="border-style: hidden;">
                    <td style="width:15%">  @Html.LabelFor(model => model.Name_Of_Auditor, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.Name_Of_Auditor, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name_Of_Auditor, "", new { @class = "text-danger" })
                    </td>

                    <td style="width:15%">@Html.LabelFor(model => model.ExceptionNo, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.DropDownListFor(model => model.ExceptionNo, new SelectList(Enumerable.Range(1, 50)))
                        @Html.EditorFor(model => model.ExceptionSubNo, new { htmlAttributes = new { placeholder = "Exception Sub No" } })
                    </td>

                </tr>

                <tr style="border-style: hidden;">
                    <td style="width:15%"> @Html.LabelFor(model => model.NatureOfException, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.DropDownListFor(model => model.NatureOfException, new List<SelectListItem> {
                            new SelectListItem { Text = "Short payment of royalty", Value = "Short payment of royalty" },
                            new SelectListItem { Text = "Short payment of profit petroleum", Value = "Short payment of profit petroleum" },
                            new SelectListItem { Text = "Short payment of Cess", Value = "Short payment of Cess" },
                            new SelectListItem { Text = "PEL Payment Fees", Value = "PEL Payment Fees" },
                            new SelectListItem { Text = "ML Payment Fees", Value = "ML Payment Fees" },
                            new SelectListItem { Text = "Inventory Valuation", Value = "Inventory Valuation" },
                            new SelectListItem { Text = "Forex", Value = "Forex" },
                            new SelectListItem { Text = "Approval of chart of accounts", Value = "Approval of chart of accounts" },
                            new SelectListItem { Text = "Insurance - Co-insured/Additionally insured", Value = "Insurance - Co-insured/Additionally insured" },
                            new SelectListItem { Text = "Insurance - waiver/subrogation", Value = "Insurance - waiver/subrogation" },
                            new SelectListItem { Text = "Management Committee meeting", Value = "Management Committee meeting" },
                            new SelectListItem { Text = "Approval of Accounts", Value = "Approval of Accounts" },
                            new SelectListItem { Text = "Site Restoration Fund", Value = "Site Restoration Fund" },
                            new SelectListItem { Text = "Development area wise allocation", Value = "Development area wise allocation" },
                            new SelectListItem { Text = "Exploration in ML area", Value = "Exploration in ML area" },
                            new SelectListItem { Text = "Delivery point", Value = "Delivery point" },
                            new SelectListItem { Text = "Periodical statements", Value = "Periodical statements" },
                            new SelectListItem { Text = "Block bank account", Value = "Block bank account" },
                            new SelectListItem { Text = "GAS flaring", Value = "GAS flaring" },
                            new SelectListItem { Text = "Measurement of petroleum", Value = "Measurement of petroleum" },
                            new SelectListItem { Text = "Short payment of PLP", Value = "Short payment of PLP" },
                            new SelectListItem { Text = "Physical verification of fixed assets", Value = "Physical verification of fixed assets" },
                            new SelectListItem { Text = "Physical verification of Inventory", Value = "Physical verification of Inventory" },
                            new SelectListItem { Text = "Procurement of materials", Value = "Procurement of materials" },
                            new SelectListItem { Text = "Bank guarantee", Value = "Bank guarantee" },
                            new SelectListItem { Text = "Block transfer", Value = "Block transfer" },
                            new SelectListItem { Text = "Essentiality certificates", Value = "Essentiality certificates" },
                            new SelectListItem { Text = "Budget", Value = "Budget" },
                            new SelectListItem { Text = "Appendix-H", Value = "Appendix-H" },
                            new SelectListItem { Text = "CRL limit", Value = "CRL limit" },
                            new SelectListItem { Text = "Cost Recovery Approval", Value = "Cost Recovery Approval" }
                        })

                    </td>

                    <td style="width:15%">   @Html.LabelFor(model => model.ExceptionTitle, htmlAttributes: new { @class = "control-label col-md-2" })</td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.ExceptionTitle, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ExceptionTitle, "", new { @class = "text-danger" })
                    </td>

                </tr>

                <tr style="border-style: hidden;">
                    <td style="width:15%">  @Html.LabelFor(model => model.ZistOfException, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.ZistOfException, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.ZistOfException, "", new { @class = "text-danger" })
                    </td>

                    <td style="width:15%"> @Html.LabelFor(model => model.ExceptionType, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.DropDownListFor(model => model.ExceptionType, new List<SelectListItem> {
                            new SelectListItem {Text = "Financial",Value =  "Financial" },
                            new SelectListItem {Text = "Non-Financial",Value =  "Non-Financial" }
                         })
                    </td>

                </tr>

                <tr style="border-style: hidden;">
                    <td style="width:15%"> @Html.LabelFor(model => model.Quantum, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.DropDownListFor(model => model.Currency, new List<SelectListItem> {
                            new SelectListItem {Text = "USD (million)",Value =  "USD (million)" },
                            new SelectListItem {Text = "INR (million)",Value =  "INR (million)" }
                         })
                        @Html.EditorFor(model => model.Quantum, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Quantum, "", new { @class = "text-danger" })
                    </td>

                    <td style="width:15%">  @Html.LabelFor(model => model.OperatorsReply, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.OperatorsReply, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.OperatorsReply, "", new { @class = "text-danger" })
                    </td>

                </tr>

                <tr style="border-style: hidden;">
                    <td style="width:15%"> @Html.LabelFor(model => model.CFComments, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.CFComments, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CFComments, "", new { @class = "text-danger" })
                    </td>

                    <td style="width:15%"> @Html.LabelFor(model => model.BlockCoordinatorsComments, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.BlockCoordinatorsComments, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BlockCoordinatorsComments, "", new { @class = "text-danger" })
                    </td>

                </tr>


                <tr style="border-style: hidden;">
                    <td style="width:15%">  @Html.LabelFor(model => model.FinalRecommendations, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.FinalRecommendations, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.FinalRecommendations, "", new { @class = "text-danger" })
                    </td>

                    <td style="width:15%">  @Html.LabelFor(model => model.ActionTaken, htmlAttributes: new { @class = "control-label col-md-2" })</td>
                    <td style="width:35%">
                        @Html.DropDownListFor(model => model.ActionTaken, new List<SelectListItem> {
                            new SelectListItem {Text = "Unsettled",Value =  "Unsettled" }
                        })

                        @*@Html.DropDownListFor(model => model.ActionTaken, new List<SelectListItem> {
                                new SelectListItem {Text = "Settled",Value =  "Settled" },
                                new SelectListItem {Text = "Unsettled",Value =  "Unsettled" }
                            })*@
                        @*@Html.EditorFor(model => model.ActionTaken, new { htmlAttributes = new { @class = "form-control",@readonly = "Unsettled" } })
                            @Html.ValidationMessageFor(model => model.ActionTaken, "", new { @class = "text-danger" })*@
                    </td>

                </tr>


                <tr style="border-style: hidden;">
                    <td style="width:15%"> @Html.LabelFor(model => model.CurrentStatus, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.CurrentStatus, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.CurrentStatus, "", new { @class = "text-danger" })
                    </td>

                    <td style="width:15%"> @Html.LabelFor(model => model.Remark, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.EditorFor(model => model.Remark, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                    </td>

                </tr>

            </tbody>
        </table>



        <hr />
        <div class="form-group">
            <label class="control-label col-md-2"><h5>Further Queries </h5> </label>
            <div class="col-md-10">
                <table id="furtherQueryTable" class="table">
                    <thead>
                        <tr>
                            <th>Further Query</th>
                            <th>Further Response</th>
                            <th>Block Coordinators Comments</th>
                            <th>CF Comments</th>
                            <th>Final Recommmendations</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.FurtherQuery.Count; i++)
                        {
                            <tr>
                                <td>
                                    @Html.EditorFor(model => model.FurtherQuery[i].FurtherQuery, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FurtherQuery[i].FurtherQuery, "", new { @class = "text-danger" })
                                </td>

                                <td>
                                    @Html.EditorFor(model => model.FurtherQuery[i].FurtherOperatorsReply, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FurtherQuery[i].FurtherOperatorsReply, "", new { @class = "text-danger" })
                                </td>

                                <td>
                                    @Html.EditorFor(model => model.FurtherQuery[i].FurtherBlockCoordinatorsComments, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FurtherQuery[i].FurtherBlockCoordinatorsComments, "", new { @class = "text-danger" })
                                </td>

                                <td>
                                    @Html.EditorFor(model => model.FurtherQuery[i].FurtherCFComments, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FurtherQuery[i].FurtherCFComments, "", new { @class = "text-danger" })
                                </td>

                                <td>
                                    @Html.EditorFor(model => model.FurtherQuery[i].FurtherFinalRecommendations, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FurtherQuery[i].FurtherFinalRecommendations, "", new { @class = "text-danger" })
                                </td>

                                <td>
                                    <button type="button" class="btn btn-danger" onclick="removeRow(this)">Remove</button>
                                </td>
                            </tr>

                        }
                    </tbody>
                </table>
                <button style="float:right" type="button" class="btn btn-primary" onclick="addRow()">Add Row</button>

            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <br />
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Block Details", "Details", "BlockManager", new { Id = Model.Block_Id }, null)
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        function addRow() {
            var table = document.getElementById('furtherQueryTable').getElementsByTagName('tbody')[0];
            var newRow = table.insertRow();
            var rowCount = table.rows.length - 1;
            newRow.innerHTML = `
                    <td><input type="text" name="FurtherQuery[${rowCount}].FurtherQuery" class="form-control" /></td>
                    <td><input type="text" name="FurtherQuery[${rowCount}].FurtherOperatorsReply" class="form-control" /></td>
                    <td><input type="text" name="FurtherQuery[${rowCount}].FurtherBlockCoordinatorsComments" class="form-control" /></td>
                    <td><input type="text" name="FurtherQuery[${rowCount}].FurtherCFComments" class="form-control" /></td>
                    <td><input type="text" name="FurtherQuery[${rowCount}].FurtherFinalRecommendations" class="form-control" /></td>
                    <td><button type="btn btn-danger" onclick="removeRow(this)">Remove</button></td>
                `;
        }

        function removeRow(button) {
            var row = button.closest('tr');
            row.parentNode.removeChild(row);
        }
    </script>
}