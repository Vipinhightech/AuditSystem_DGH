@model AuditSystem.Core.Models.Audit_Attachments

@{
    ViewBag.Title = "Edit";
}

@*<h2>Edit</h2>*@
@{
    var currentYear = DateTime.Now.Year;
    var startYear = 1995;
    var endYear = currentYear + 1; // To include the current financial year
    var financialYears = new List<SelectListItem>();

    for (var year = currentYear; year >= startYear; year--)
    {
        financialYears.Add(new SelectListItem
        {
            Text = $"{year}-{year + 1}",
            Value = $"{year}-{year + 1}"
        });
    }
}

@using (Html.BeginForm("Edit", "Attachments", FormMethod.Post, new { encType = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Edit Attachment</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)


        <table class="table" style="width:80%;">
            <tbody>
                <tr style="border-style:hidden;">
                    <td style="width:15%">  @Html.LabelFor(model => model.Block.Block_Name, htmlAttributes: new { @class = "control-label col-md-2" }) </td>
                    <td style="width:35%">
                        @Html.DisplayFor(model => model.Block.Block_Name)
                        @Html.HiddenFor(model => model.Block_Id)

                    </td>

                    <td style="width:15%">Year</td>
                    <td style="width:35%">
                        From:
                        @Html.DropDownListFor(model => model.FromYear, financialYears)
                        &nbsp; To:
                        @Html.DropDownListFor(model => model.ToYear, financialYears)
                    </td>
                </tr>

                <tr style="border-style:hidden;">
                    <td style="width:15%"> @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })  </td>
                    <td style="width:35%">

                        @Html.DropDownListFor(model => model.Title, new List<SelectListItem> {
                            new SelectListItem {Text = "Audit Exception Letter",Value =  "Audit Exception Letter" },
                            new SelectListItem {Text = "Operators Reply",Value =  "Operators Reply" },
                            new SelectListItem {Text = "Settlement Letter",Value =  "Settlement Letter" }
                        })
                    </td>

                    <td style="width:15%"> @Html.LabelFor(model => model.DateofAttachment, htmlAttributes: new { @class = "control-label col-md-2" })  </td>
                    <td style="width:15%"> @Html.LabelFor(model => model.DateofAttachment, htmlAttributes: new { @class = "control-label col-md-2" })  </td>
                    <td style="width:35%">
                        @Html.TextBoxFor(m => m.DateofAttachment, "{0:yyyy-MM-dd}", new { @type = "date", @class = "datepicker" })
                        @Html.ValidationMessageFor(model => model.DateofAttachment, "", new { @class = "text-danger" })
                    </td>
                    <!--<td style="width:35%">-->
                    @*@Html.TextBoxFor(m => m.DateofAttachment, "{0:yyyy-MM-dd}", new { @type = "date", @class = "datepicker", @max = DateTime.Now.ToString("yyyy-MM-dd") })
        @Html.ValidationMessageFor(model => model.DateofAttachment, "", new { @class = "text-danger" })*@

                    <!--@Html.TextBoxFor(m => m.DateofAttachment, "{0:DDMMYYYY}",new { @type = "date", @class = "datepicker", @max = DateTime.Now.ToString("dd-mm-yyyy"), @dateFormat = "dd/mm/yyyy" })
    @Html.ValidationMessageFor(model => model.DateofAttachment, "", new { @class = "text-danger" })


    @Html.TextBoxFor(m => m.DateofAttachment, new { type = "text", @class = "form-control span2", autocomplete = "off", @data_inputmask_alias = "datetime", @data_inputmask_inputformat = "yyyy/mm/dd", @data_mask = "true", id = "txtDate" })
    <input type="text" class="form-control" id="date" />
    <style>
        .input-group-append {
            cursor: pointer;
        }
    </style>

    <script>
        $(function () {
            $('#datepicker').datepicker();
        });
    </script>-->
                    @*@data_inputmask_alias = "datetime", @data_inputmask_inputformat = "dd/mm/yyyy", @data_mask = "true"*@
                    <!--</td>-->
                </tr>

            </tbody>
        </table>






        @Html.HiddenFor(model => model.Doc_Address)


        <a target="_blank" href="~/Attachments/@Model.Doc_Address">View Existing Doc</a>

        <br />
        <div class="form-group">

            <div class="col-md-10">
                <input type="file" id="file" name="file" class="form-control" />
            </div>
        </div>


        <br />
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to Block Details", "Details", "BlockManager", new { Id = Model.Block_Id }, null)
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
<script type="text/javascript">
    $(function () {
        $('#txtDate').datepicker({
            format: "dd/mm/yyyy"
        });
    });
</script>

<script>

    $(".datepicker").datepicker({
        dateFormat: 'dd-mm-yy'
    });

        $(function () {
            $('.select2').select2()
            $('.select2bs4').select2({
                theme: 'bootstrap4'
            })

            //Datemask dd/mm/yyyy
            $('#datemask').inputmask('dd/mm/yyyy', { 'placeholder': 'dd/mm/yyyy' })
            //Datemask2 mm/dd/yyyy
            $('#datemask2').inputmask('mm/dd/yyyy', { 'placeholder': 'mm/dd/yyyy' })
            //Money Euro
            $('[data-mask]').inputmask()

            //Date picker
            $('#reservationdate').datetimepicker({
                format: 'L'
            });

            //Date and time picker
            $('#reservationdatetime').datetimepicker({ icons: { time: 'far fa-clock' } });

            //Date range picker
            $('#reservation').daterangepicker()
            //Date range picker with time picker
            $('#reservationtime').daterangepicker({
                timePicker: true,
                timePickerIncrement: 30,
                locale: {
                    format: 'MM/DD/YYYY hh:mm A'
                }
            })
            //Date range as a button
            $('#daterange-btn').daterangepicker(
                {
                    ranges: {
                        'Today': [moment(), moment()],
                        'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                        'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                        'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                        'This Month': [moment().startOf('month'), moment().endOf('month')],
                        'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                    },
                    startDate: moment().subtract(29, 'days'),
                    endDate: moment()
                },
                function (start, end) {
                    $('#reportrange span').html(start.format('MMMM D, YYYY') + ' - ' + end.format('MMMM D, YYYY'))
                }
            )

            //Timepicker
            $('#timepicker').datetimepicker({
                format: 'LT'
            })

            //Bootstrap Duallistbox
            $('.duallistbox').bootstrapDualListbox()

            //Colorpicker
            $('.my-colorpicker1').colorpicker()
            //color picker with addon
            $('.my-colorpicker2').colorpicker()

            $('.my-colorpicker2').on('colorpickerChange', function (event) {
                $('.my-colorpicker2 .fa-square').css('color', event.color.toString());
            })

            $("input[data-bootstrap-switch]").each(function () {
                $(this).bootstrapSwitch('state', $(this).prop('checked'));
            })

        })
        // BS-Stepper Init
        document.addEventListener('DOMContentLoaded', function () {
            window.stepper = new Stepper(document.querySelector('.bs-stepper'))
        })

        // DropzoneJS Demo Code Start
        Dropzone.autoDiscover = false

        // Get the template HTML and remove it from the doumenthe template HTML and remove it from the doument
        var previewNode = document.querySelector("#template")
        previewNode.id = ""
        var previewTemplate = previewNode.parentNode.innerHTML
        previewNode.parentNode.removeChild(previewNode)

        var myDropzone = new Dropzone(document.body, { // Make the whole body a dropzone
            url: "/target-url", // Set the url
            thumbnailWidth: 80,
            thumbnailHeight: 80,
            parallelUploads: 20,
            previewTemplate: previewTemplate,
            autoQueue: false, // Make sure the files aren't queued until manually added
            previewsContainer: "#previews", // Define the container to display the previews
            clickable: ".fileinput-button" // Define the element that should be used as click trigger to select files.
        })

        myDropzone.on("addedfile", function (file) {
            // Hookup the start button
            file.previewElement.querySelector(".start").onclick = function () { myDropzone.enqueueFile(file) }
        })

        // Update the total progress bar
        myDropzone.on("totaluploadprogress", function (progress) {
            document.querySelector("#total-progress .progress-bar").style.width = progress + "%"
        })

        myDropzone.on("sending", function (file) {
            // Show the total progress bar when upload starts
            document.querySelector("#total-progress").style.opacity = "1"
            // And disable the start button
            file.previewElement.querySelector(".start").setAttribute("disabled", "disabled")
        })

        // Hide the total progress bar when nothing's uploading anymore
        myDropzone.on("queuecomplete", function (progress) {
            document.querySelector("#total-progress").style.opacity = "0"
        })

        // Setup the buttons for all transfers
        // The "add files" button doesn't need to be setup because the config
        // `clickable` has already been specified.
        document.querySelector("#actions .start").onclick = function () {
            myDropzone.enqueueFiles(myDropzone.getFilesWithStatus(Dropzone.ADDED))
        }
        document.querySelector("#actions .cancel").onclick = function () {
            myDropzone.removeAllFiles(true)
        }
                                                                // DropzoneJS Demo Code End
</script>
